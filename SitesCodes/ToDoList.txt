const express = require("express");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const _=require("lodash");

const app = express();

app.set('view engine', 'ejs');

app.use(bodyParser.urlencoded({
  extended: true
}));
app.use(express.static("public"));

////////////////////////////////mongoose
mongoose.connect("mongodb+srv://BP:Od097832@cluster1.teqda.mongodb.net/todolistDb?retryWrites=true&w=majority", {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

const itemsSchema = {
  name: String
};
const Item = mongoose.model("Item", itemsSchema);

const item1 = new Item({
  name: "Welcome to your todolist!"
});
const item2 = new Item({
  name: "Hit the + button to create a new item."
});
const item3 = new Item({
  name: "<-- Hit this to delete an item."
});
const item4 = new Item({
  name: "Type /listName in the address bar to create a new To Do List."
});

const defaultItems = [item1, item2, item3, item4];
///////////////////////////////////////////
const listSchema = {
  name: String,
  items: [itemsSchema] //inside should be itemsSchema based items
};

const List = mongoose.model("List", listSchema);
/////////////////////////////////////////


app.get("/", function(req, res) {

  Item.find({}, function(err, result) {

    if (result.length === 0) {

      Item.insertMany(defaultItems, function(err) {
        if (err) {
          console.log("There was an error.")
        } else {
          console.log("Items added!")
        }
      });
      res.redirect("/");
    } else {
      res.render("list", {
        listTitle: "Today",
        newListItems: result
      });
    }
  });
});

app.post("/", function(req, res) {

  const itemName = req.body.newItem;
  const listName=req.body.list;

  const item = new Item({
    name: itemName
  });

if (listName==="Today"){
  item.save();
  res.redirect("/");
}else{
  List.findOne({name:listName}, function(err, foundList){
    foundList.items.push(item);
    foundList.save();
    res.redirect("/"+listName);
  });
}


  // if (req.body.list === "Work") {
  //   workItems.push(item);
  //   res.redirect("/work");
  // } else {
  //   items.push(item);
  //   res.redirect("/");
  // }
});

app.post("/delete", function(req, res) {
  const deleteItem = req.body.checkbox;
  const listName=req.body.listName;

  if (listName==="Today"){
    Item.findByIdAndRemove(deleteItem, function(err) {
      if (!err) {
        console.log("The item is deleted.")
        res.redirect("/");
      }
    });
  }else{
    List.updateOne({name:listName}, {$pull:{items:{_id:deleteItem}}}, function(err, foundList){
      if(!err){
        res.redirect("/"+listName);
      }
    })
  }

});


app.get("/:route", function(req, res) {
  const route = _.capitalize(req.params.route);
  List.findOne({name: route}, function(err, result) {
    if (!err) {
      if (!result) {
        const list = new List({
          name: route,
          items: defaultItems
        });
        list.save();
        res.redirect("/"+route);
      } else {
        res.render("list", {listTitle:result.name, newListItems:result.items});
      }
    }
  });
});

let port = process.env.PORT;
if (port == null || port == "") {
  port = 3000;
}

app.listen(port, function() {
  console.log("Server has started successfully!");
});
